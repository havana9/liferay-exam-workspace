/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.exam.usercrud.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exam.usercrud.model.UserCrud;
import com.liferay.exam.usercrud.service.UserCrudLocalService;
import com.liferay.exam.usercrud.service.persistence.UserCrudPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the user crud local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.exam.usercrud.service.impl.UserCrudLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.exam.usercrud.service.impl.UserCrudLocalServiceImpl
 * @see com.liferay.exam.usercrud.service.UserCrudLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class UserCrudLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements UserCrudLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.exam.usercrud.service.UserCrudLocalServiceUtil} to access the user crud local service.
	 */

	/**
	 * Adds the user crud to the database. Also notifies the appropriate model listeners.
	 *
	 * @param userCrud the user crud
	 * @return the user crud that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public UserCrud addUserCrud(UserCrud userCrud) {
		userCrud.setNew(true);

		return userCrudPersistence.update(userCrud);
	}

	/**
	 * Creates a new user crud with the primary key. Does not add the user crud to the database.
	 *
	 * @param userCrudId the primary key for the new user crud
	 * @return the new user crud
	 */
	@Override
	@Transactional(enabled = false)
	public UserCrud createUserCrud(long userCrudId) {
		return userCrudPersistence.create(userCrudId);
	}

	/**
	 * Deletes the user crud with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param userCrudId the primary key of the user crud
	 * @return the user crud that was removed
	 * @throws PortalException if a user crud with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public UserCrud deleteUserCrud(long userCrudId) throws PortalException {
		return userCrudPersistence.remove(userCrudId);
	}

	/**
	 * Deletes the user crud from the database. Also notifies the appropriate model listeners.
	 *
	 * @param userCrud the user crud
	 * @return the user crud that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public UserCrud deleteUserCrud(UserCrud userCrud) {
		return userCrudPersistence.remove(userCrud);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(UserCrud.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return userCrudPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.exam.usercrud.model.impl.UserCrudModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return userCrudPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.exam.usercrud.model.impl.UserCrudModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return userCrudPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return userCrudPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return userCrudPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public UserCrud fetchUserCrud(long userCrudId) {
		return userCrudPersistence.fetchByPrimaryKey(userCrudId);
	}

	/**
	 * Returns the user crud matching the UUID and group.
	 *
	 * @param uuid the user crud's UUID
	 * @param groupId the primary key of the group
	 * @return the matching user crud, or <code>null</code> if a matching user crud could not be found
	 */
	@Override
	public UserCrud fetchUserCrudByUuidAndGroupId(String uuid, long groupId) {
		return userCrudPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the user crud with the primary key.
	 *
	 * @param userCrudId the primary key of the user crud
	 * @return the user crud
	 * @throws PortalException if a user crud with the primary key could not be found
	 */
	@Override
	public UserCrud getUserCrud(long userCrudId) throws PortalException {
		return userCrudPersistence.findByPrimaryKey(userCrudId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(userCrudLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(UserCrud.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("userCrudId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(userCrudLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(UserCrud.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("userCrudId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(userCrudLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(UserCrud.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("userCrudId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return userCrudLocalService.deleteUserCrud((UserCrud)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return userCrudPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the user cruds matching the UUID and company.
	 *
	 * @param uuid the UUID of the user cruds
	 * @param companyId the primary key of the company
	 * @return the matching user cruds, or an empty list if no matches were found
	 */
	@Override
	public List<UserCrud> getUserCrudsByUuidAndCompanyId(String uuid,
		long companyId) {
		return userCrudPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of user cruds matching the UUID and company.
	 *
	 * @param uuid the UUID of the user cruds
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of user cruds
	 * @param end the upper bound of the range of user cruds (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching user cruds, or an empty list if no matches were found
	 */
	@Override
	public List<UserCrud> getUserCrudsByUuidAndCompanyId(String uuid,
		long companyId, int start, int end,
		OrderByComparator<UserCrud> orderByComparator) {
		return userCrudPersistence.findByUuid_C(uuid, companyId, start, end,
			orderByComparator);
	}

	/**
	 * Returns the user crud matching the UUID and group.
	 *
	 * @param uuid the user crud's UUID
	 * @param groupId the primary key of the group
	 * @return the matching user crud
	 * @throws PortalException if a matching user crud could not be found
	 */
	@Override
	public UserCrud getUserCrudByUuidAndGroupId(String uuid, long groupId)
		throws PortalException {
		return userCrudPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the user cruds.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.exam.usercrud.model.impl.UserCrudModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of user cruds
	 * @param end the upper bound of the range of user cruds (not inclusive)
	 * @return the range of user cruds
	 */
	@Override
	public List<UserCrud> getUserCruds(int start, int end) {
		return userCrudPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of user cruds.
	 *
	 * @return the number of user cruds
	 */
	@Override
	public int getUserCrudsCount() {
		return userCrudPersistence.countAll();
	}

	/**
	 * Updates the user crud in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param userCrud the user crud
	 * @return the user crud that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public UserCrud updateUserCrud(UserCrud userCrud) {
		return userCrudPersistence.update(userCrud);
	}

	/**
	 * Returns the user crud local service.
	 *
	 * @return the user crud local service
	 */
	public UserCrudLocalService getUserCrudLocalService() {
		return userCrudLocalService;
	}

	/**
	 * Sets the user crud local service.
	 *
	 * @param userCrudLocalService the user crud local service
	 */
	public void setUserCrudLocalService(
		UserCrudLocalService userCrudLocalService) {
		this.userCrudLocalService = userCrudLocalService;
	}

	/**
	 * Returns the user crud persistence.
	 *
	 * @return the user crud persistence
	 */
	public UserCrudPersistence getUserCrudPersistence() {
		return userCrudPersistence;
	}

	/**
	 * Sets the user crud persistence.
	 *
	 * @param userCrudPersistence the user crud persistence
	 */
	public void setUserCrudPersistence(UserCrudPersistence userCrudPersistence) {
		this.userCrudPersistence = userCrudPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.exam.usercrud.model.UserCrud",
			userCrudLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.exam.usercrud.model.UserCrud");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return UserCrudLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return UserCrud.class;
	}

	protected String getModelClassName() {
		return UserCrud.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = userCrudPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = UserCrudLocalService.class)
	protected UserCrudLocalService userCrudLocalService;
	@BeanReference(type = UserCrudPersistence.class)
	protected UserCrudPersistence userCrudPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}